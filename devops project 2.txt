21. Steps to follow to create VPC using Terraform
---------------
aws vpc in terraform
1.create vpc 
2.creat subnet
3.create internet gateway
4.create route table
5.route table association


#vpc
resource "aws_vpc" "dpp-vpc" {
	cidr_block = "10.1.0.0/16"
	tags = {
	 name = "dpw_vpc"
	}
}

#subnet
resource "aws_subnet" "dpp-public_subnet_01" {
	vpc_id = aws_vpc.dpp-vpc.id
	cidr_block = "10.1.1.0/24"
	map_public_ip_on_launch = "true"
	availability_zone = "us-east-1a"
	tags = {
	  name = "dpp-public_subnet_01"
	}
}

#internet gateway
resource "aws_inetrnet_gateway" "dpp-igw" {
	vpc_id = aws_vpc.dpp-vpc.id
	tags = {
			name = "dpw-igw"
	}
}

#route table
resource "aws_route_table" "dpp-public-rt" {
	vpc_id = aws_vpc.dpp-vpc.id
	route {
		cidr_block = "0.0.0.0/0"
		gateway_id = aws_inetrnet_gateway.dpp-igw.id
	}
	tags = {
	  name = "dpp-public-rt"
	}
}

#route table association
resource "aws_route_table_association" "dpp-rta-public-subnet-1" {
	subnet_id = aws_subnet.dpp-public_subnet_01.id
	route_table_id = aws_route_table.dpp-public-rt.ids
} 

resource "aws_route_table_association" "dpp-rta-public-subnet-2" {
	subnet_id = aws_subnet.dpp-public_subnet_01.id
	route_table_id = aws_route_table.dpp-public-rt.ids
} 



-----------------------------
23. Cerate VPC using Terraform manifest file
--------------------------
add security groups
resource "aws_security_group" "demo-sg" {
  vpc_id = aws.vpc.dpp-vpc.id
}

resource "aws_instance" "demo-server" {
	vpc_security_group_ids = ["aws_security_group.demo-sg.id"]
}



-------------------------
24. Create DevOps instances using for_each in Terraform
----------------------
resource "aws_instance" "demo-server" {
	for_each = toset(["jenkins-master", "build-slave", "ansible"])
}



---------------
26.lecture
---------------
install ansible in ubuntu system
	sudo apt update
	sudo apt install software-properties-common
	sudo add-apt-repository --yes --update ppa:ansible/ansible
	sudo apt install ansible
	

----------------
27.lecture
---------------
ansible 

create a host file for jenkins master under /opt
vi hosts
#[add private ip]

[jenkins-master]
10.2.2.

[jenkins-master:vars]
ansible_user=ubuntu
ansible_ssh_private_key_file=/opt/dpp.pem

[jenkins-slave]
10.2.2.13

[jenkins-slave:vars]
ansible_user=ubuntu
ansible_ssh_private_key_file=/opt/dpp.pem

mv dpp.pem /opt
chmod 400 dpp.pem
ansible all -i hosts -m ping (to check system ping)

-------------
28.lecture
-------------
1.add jenkins repo keys to system
2.add repo to system
3.install dependencies
4.install jenkins

jenkins-master-setup.yaml
-----------
---
- hosts: jenkins-master
  become: true
  tasks:
  - name: add jenkins key
    apt-key:
	  url: https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
	  state: present
	  
  - name: add jenkins repo
    apt_repository:
	  repo: 'deb https://pkg.jenkins.io/debian-stable binary/'

  - name: insatll java
    apt:
	  name: openjdk-11-jre
	  state: present

  - name: insatll jenkins
    apt:
	  name: jenkins
	  state: present
	  
  - name: start jenkins service
    service:
		name: jenkins
		state: started
	
  - name: enable jenkins to start at boot time 
    service: 
      name: jenkins 
      enabled: yes 	

--------------	  
29.lecture
-----------
vi jenkins-master-setup.yaml
ansible playbook -i /opt/hosts jenkins-master-setup.yaml --check

port 8080 need to be configure for jenkins in aws 

30.lecture
-----------
/var/lib/jenkins/secrets/initialAdminPassword

chnge the port number in terraform file
add ingress 
	ingress {
	description		= "jenkins port"
	from_port 		= 8080
	to_port 		= 8080
	protocol 		= "tcp"
	cidr_blocks		= ["0.0.0.0/0"]
	}
	
terraform plan
terraform apply --auto-approved
open jenkins in browser
 
31.lecture
------------
1.update system
2.install java
3.download maven
4.extract it
5.add path to bash_profile

vi jenkins-slave-setup.yaml
---
- hosts: jenkins-slave
  become: root
  tasks: 
  - name: update ubuntu repo and cache
	apt: 
	  update_cache: yes 
      fource_apt_get: yes 
      cache_valid_time: 3600 
	  
  - name: install java
	apt:
	  name: openjdk-11-jre
	  state: present
	
  - name: download maven package
    get_url: 
	  url: https://dlcdn.apache.org/maven/maven-3/3.9.2/binaries/apache-maven-3.9.2-bin.tar.gz
	  dest: /opt
	  
  - name: extract maven packages
    unarchive:
	  src: /opt/apache-maven-3.9.2-bin.tar.gz
	  dest: /opt
	  remote_src: yes
	  
32.lecture
---------------
create jenkins-slave-setup.yaml this file under opt
dry run this playbook
ansible-playbook -i /opt/hosts/jenkins-slave-setup.yaml --check

remove       fource_apt_get: yes 
run this playbook
ls 
cd apache-maven
cd bin
ls
./mvn --version
mvn only work if you use full path /opt/apache-maven...
or add this file in bash profile





35. Preparing for Jenkins master and slave configuration
---------------
jenkins master slave configure
1.change password fpr jenkins
manage jenkins -> credential -> ssh username
-> maven server -> add private key - dpp key

Add Credentials
Manage Jenkins --> Manage Credentials --> System --> Global credentials --> Add credentials
Provide the below info to add credentials
kind: ssh username with private key
Scope: Global
ID: maven_slave
Username: ec2-user
private key: dpo.pem key content


36.lecture
--------------
add node
manage jenkins -> manage nodes and clouds ->new nodes 
-> permanent agent

add private ip - add cred - save
create a project and run it on maven label
execute a shell command 
= echo "hello i am slave system" >> /home/ubuntu/maven.txt

Add node
Follow the below setups to add a new slave node to the jenkins

Goto Manage Jenkins --> Manage nodes and clouds --> New node --> Permanent Agent
Provide the below info to add the node
Number of executors: 3
Remote root directory: /home/ec2-user/jenkins
Labels: maven
Usage: Use this node as much as possible
Launch method: Launch agents via SSH
Host: <Private_IP_of_Slave>
Credentials: <Jenkins_Slave_Credentials>
Host Key Verification Strategy: Non verifying Verification Strategy
Availability: Keep this agent online as much as possible

37.lecture
----------
create pipeline script
1.declarative
2.scripted 
we will use declarative pipeline
= 
pipeline{
	agent {
		node {
			label 'maven-slave'
		}
	}
	
	stages {
		stage('clone-code') {
			steps {
				git branch: 'main', url: 'https://github.tweet.git'
			}
		}
	}
}

**clone the code pipeline script using jenkins pipeline
syntax 
git branch: 'main', url: 'https://github.tweet.git'




39. Adding build stage to Jenkinsfile
-----------------
jenkins file undertweet-trend
= touch Jenkinsfile
(copy pipeline and paste here)

git add jenkinsfile
git add .
git commit -m "1st jenkins file"
git push origin main

pipeline select git 
edit jenkins file ...remove git clone and add build stage
=
adding build stage
------------------

pipeline{
	agent {
		node {
			label 'maven-slave'
		}
	}
environment {
	PATH = "/opt/apache-maven-3.9.2/bin:$PATH"
}
	stages {
      stage ("build"){
		  steps {
			  sh 'mvn clean deploy'
			}
		}
	} 
}


git add jenkinfile
git commit -m "adding jenkinsfile"
git push origin main


40. Adding GitHub credentials to Jenkins
------------
create github token and add it in jenkins
settings -> developer settings -> generate new token, select all


manage jenkins - > credentials ->system -> global credentials ->
add credentials - > username and password

41. Setup multibranch pipeline job
--------------
multibranch pipeline
create new branch git web
= git checkout -b stage
will delete jenkinsfile and add it into stage branch

rm -rf jenkinsfile 
git add .
git commit -m "adding stage branch"
git push origin stage

add jenkinsfile in stage branch


42. setup GitHub webhook
--------------------
github webhook (it will automatically trigger
pipeline)

1.install "multibranch scan webhhok trigger" plugin
from dashboard --> manage jenkins --> manage plugins
 -->available plugins
 
 search for "multibranch scan webhook trigger" plugin and install it.

2. got to multibranch pipeline job
--> configure -->scan multibranch pipeline -->scan by weebhook
trigger token : token name = dpp-token

3. add webhook to github repo 
repo -> settings -> webhook -> add webhook
=payload url: <jenkins_ip>:8080/mutibranch-webhook-trigger/
 invoke?token=<token_name(dpp-token)>
 
conetnt type: application/json
which event would you like to trigger this webhook
= just the push event



44. lecture - sonarcube integration
----------------------------
create an sonarcube account at https:/sonarcloud.io
generate authentication token for sonarcube
generate token for jenkins
download "sonarcube scanner" plugin on jenkins
configure sonarcube server
add sonarcube scanner to jenkins
create sonarcube properties file
add sonarcube stage in the jenkinsfile

using github account ...then login

45.lecture
----------------------
add sonarcube plugin
add sonarcube server
system- >sonarcube server -> add -> sonarcube server
url-> https://sonnarcloud.io/ ->save

manage jenkins-> tools->add sonarcube scanner -> save

46.lecture
-----------------
sonarcube properties file
account -> create a new organisation manually

create organization
name->key
choose free plan

create project->twiter-trend
information -> collect name and projject key details
 and add ot in sonar.verbose file
 
 save as "sonar-project-properties" withoutut extension

47.lecture
--------------
add sonarcube stage in out jenkinsfile
	  stage('sonarcube analysis') {
	  environment {
	    scannerhome = tool 'valaxy-sonar-scanner' // same as define in jeknins
	  }
	  steps{
	  withSonarQubeEnv('valaxy-sonar-server')
	  sh "${scannerhome}/bin/sonar-scanner"
	  }
	  }

jenkins ip address automatically chnaged so we need
 to update new ip in github webhook
 
 update key of the organisation in sonar.verbos file
 
 
48.lecture
---------------------------
build step:
-----
	stages 
		stage("build") {
			steps {
				echo "build started"
				sh 'mvn clean deploy -Dmaven.test.skip=true'
				echo "build completed"
		}
		
	}


how to enable unit test in jenkinsfile
-----
	 stage("test") {
		steps {
			echo "unit test started"
			sh 'mvn surefire-report:report'
			echo "unit test completed"
		}
		
	}


49. lecture - sonar quality gates
------------------------------
valaxy-java quality gates
add condition code smell = 50 



50.lecture
------------------------
add quality gate stages in jenkinsfile

 stage("Quality Gate"){
    steps {
        script {
        timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be killed after a timeout
    def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
    if (qg.status != 'OK') {
      error "Pipeline aborted due to quality gate failure: ${qg.status}"
    }
  }
}
    }
  }


 51.lecture - Jfrog artifactory
------------------------------
create artifactory account
generate access token with username
add username and password inder jenkins cred
install artifactory plugin
update jenkinsfile with jar publish stage
create dockerfile
create and publish docker image on artifactory 



51.lecture - artifactoryaccount creatiion
------------------------------
create cloud version jfrog
create maven repo



52.lecture - jfrog integration with jenkins
------------------------------
platform conf -> access token
jenkins-access-token -admin ->generate --copy access token

manage jenkins -> credentials -> system -> global credential ->username with password
copy the key here

add plugin -> search for artifactory



55.lecture - adding jenkins stage in jfrog
-----------------------------------
change jenkins file
add cred in jenkins file
rm -rf target



57.lecture - ansible playbook to install docker
-----------------------------------
ansible - jenkins slave setup.yml - add docker 

  - name: install docker
    apt:
	  name:docker.io
	  state: present
	  
  - name: start docker
    service:
	  name: docker
	  state: started

ansible-playbook -i hosts jenkins_slave_setup.yml --check



58.lecture dockerfile
------------------------
Dockerfile
= FROM openjdk:8
COPY jarstagging/com/valaxy/demo-workshop/2.1.2.demo.jar ttrend.jar
ENTRYPOINT ["java" , "-jar" , "ttrend.jar"]

pom.xml version number should be same



59.lecture Docker artifact repository in JFrog Artifactory
---------------------------------------
jfrog new repo
quick setup- docker - valaxy- 

valaxy local

jenkins- manage jenkins- plugin - docker pipeline

make different folder for doker , jenkins
commit all the code changes



60.lecture Add docker image publish stage to Jenkinsfile
--------------------------------

def imagename = 'valaxy01.jfrog.io/valaxy-docker-local/ttrend'
def version = '2.0.2' ##shouldbe same as pom.xml
 stage("Docker build") {
   steps {
     script {
		echo 'docker build started'
		app = docker.build(iamgename+":"+version)
		echo 'docker build ends'
		}
	 }
   }
 stage ("Docker publish") {
   steps{
     script{
	 echo 'docker publish started'
	 docker.withregistry(registry, 'artifact-cred'){
		app.push()
	 }
	 echo 'docker publish end'
	 }
   }
 }

  add this in jenkinsfile
build will fail bcoz we need to give permission to docker .sock

**add step in jenkins-slave-setup.yml
 
 - name: give 777 permission on /var/run/docker.sock
   file: 
      path: /var/run/docker.sock
	  state:file
      mode: 0777
	  
  - name: start docker on boot time
    service:
	  name: docker
	  enabled: yes
 

 
61.lecture Testing Docker image by creating container out of it
------------------------------------------
create docker image
= docker run -it --name ttrend -p 8000:8000 valaxy-docker-local/ttrend:2.1.2

image will be created
docker ps -a = to check all container
open port 8000 on aws



63.creating EKS using terraform
---------------------------------------
eks.tf
=k8s creation of IAM roles, nodes, scalling policy 

sg.tf 
=security groups creation



64.lecture Terraform manifest file to setup AWS EKS
------------------------------------------
 
chnge eks file
create vpc folder and move existing file inside to this


65.lecture terraform manifest file
-----------------------------------------
terraform init
terraform validate
terraform apply --auto-approve

aws eks- check if it is created



66. lecture - how to terraform destroy
---------------------------
comment it out sg eks and eks in vpc file
terraform apply -- we cant use = terraform destroy bcoz it will destroy
whole infrustucture 



67. Steps to integrate Kubernetes with Jenkins
--------------------------------------------
aws eks we dont have master node , so we need a bootstarp server
kubectl to manage cluster



68. How to integrate EKS cluster with maven server
--------------------------------------------
1.Setup kubectl - download kubectl in slave system, use same version 
as k8s version

curl -o https://
chmod +x kubectl
mv kubectl /usr/local/bin
kubectl version


2.Make sure you have installed awscli latest version. If it has awscli version 1.X then remove it and install awscli 2.X
aws = to check aws cli version
aws cli download websearch

curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
apt install unzip
unzip awscliv2.zip
sudo ./aws/install --update
aws --version (install aws cli version 2.12)

 
3.Configure awscli to connect with aws account
 aws configure
 Provide access_key, secret_key

 
 
 
4.Download Kubernetes credentials and cluster configuration (.kube/config file) from the cluster

= aws eks update-kubeconfig --region us-east-1 --name valaxy-eks-01

kubectl get nodes






































